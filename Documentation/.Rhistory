library(SuperLearner)
# Review available models.
listWrappers()
# Peek at code for a model.
SL.glmnet
library(SuperLearner)
# Review available models.
listWrappers()
# Peek at code for a model.
SL.glmnet
############################
# Setup test dataset from mlbench.
# NOTE: install mlbench package if you don't already have it.
data(BreastCancer, package="mlbench")
# Remove missing values - could impute for improved accuracy.
data = na.omit(BreastCancer)
# Set a seed for reproducibility in this random sampling.
set.seed(1)
# Expand out factors into indicators.
data2 = data.frame(model.matrix( ~ . - 1, subset(data, select = -c(Id, Class))))
# Check dimensions after we expand our dataset.
dim(data2)
library(caret)
# Remove zero variance (constant) and near-zero-variance columns.
# This can help reduce overfitting and also helps us use a basic glm().
# However, there is a slight risk that we are discarding helpful information.
preproc = caret::preProcess(data2, method = c("zv", "nzv"))
data2 = predict(preproc, data2)
rm(preproc)
# Review our dimensions.
dim(data2)
# Reduce to a dataset of 100 observations to speed up model fitting.
train_obs = sample(nrow(data2), 100)
# X is our training sample.
X = data2[train_obs, ]
# Create a holdout set for evaluating model performance.
X_holdout = data2[-train_obs, ]
# Create a binary outcome variable.
outcome = as.numeric(data$Class == "malignant")
Y = outcome[train_obs]
Y_holdout = outcome[-train_obs]
# Review the outcome variable distribution.
table(Y, useNA = "ifany")
# Review the covariate dataset.
str(X)
# Clean up
rm(data2, outcome)
install.packages("RhpcBLASctl")
packages <- c("ggplot2", "plyr", "colorspace","grid","data.table","VIM","MASS","Matrix",
"lme4","arm","foreach","glmnet","class","nnet","mice","missForest",
"calibrate","nnls","SuperLearner","plotrix","TeachingDemos","plotmo",
"earth","parallel","splines","gam","mi",
"BayesTree","e1071","randomForest", "Hmisc","dplyr","Amelia","bartMachine","knockoff")
## ipak function below: install (if missing) and load (if installed) multiple R packages
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, repos='http://cran.rstudio.com/')
sapply(pkg, require, character.only = TRUE)
}
#install.packages('package_name', dependencies=TRUE, repos='http://cran.rstudio.com/')
ipak(packages)
x=1:20
dim(x)=c(4,5)
z
x
eigen(x)
eigen(x%*%t(x))
eigen(t(x)%*%x)
x=rnorm(40,sigma=10)
x=rnorm(40,sig=10)
?rnorm
x=rnorm(40,sd=10)
dim(x)=c(4,10)
eigen(x%*%t(x))
eigen(t(x)%*%x)
x=arima.sim(list(order=c(1,0,1), ar=0.6,ma=0.9), n=100)
acf(x)
y=arima.sim(list(order=c(1,0,0), ar=0.6), n=100)
acf(y)
z=arima.sim(list(order=c(0,0,1), ma=0.9), n=100)
acf(z)
x=arima.sim(list(order=c(1,0,1), ar=0.6,ma=0.9), n=100)
y=arima.sim(list(order=c(1,0,0), ar=0.6), n=100)
z=arima.sim(list(order=c(0,0,1), ma=0.9), n=100)
acf(z)
pacf(z)
acf(y)
pacf(y)
acf(x)
pacf(x)
x=arima.sim(list(order=c(1,0,1), ar=0.6,ma=0.9), n=100)
acf(x)
pacf(x)
y=arima.sim(list(order=c(1,0,0), ar=0.6), n=100)
acf(y)
pacf(y)
x=arima.sim(list(order=c(1,0,1), ar=0.6,ma=0.9), n=100)
acf(x,main="ARMA model")
pacf(x,main="ARMA model")
y=arima.sim(list(order=c(1,0,0), ar=0.6), n=100)
acf(y,main="AR model")
pacf(y,,main="AR model")
z=arima.sim(list(order=c(0,0,1), ma=0.9), n=100)
acf(z,main="MA model")
pacf(z,main="MA model")
x=arima.sim(list(order=c(1,0,1), ar=0.6,ma=0.9), n=100)
acf(x,main="ARMA model")
pacf(x,main="ARMA model")
y=arima.sim(list(order=c(1,0,0), ar=0.6), n=100)
acf(y,main="AR model")
pacf(y,,main="AR model")
z=arima.sim(list(order=c(0,0,1), ma=0.9), n=100)
acf(z,main="MA model")
pacf(z,main="MA model")
View(BreastCancer)
View(data)
View(X)
